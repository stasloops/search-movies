{"ast":null,"code":"var _jsxFileName = \"D:\\\\search-movies\\\\search-movies\\\\src\\\\Components\\\\Films\\\\Films.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./Films.css\";\nimport FilmsItem from './FilmsItem/FilmsItem';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Films({\n  setItemid,\n  getValue,\n  getSearch\n}) {\n  _s();\n\n  const [loadin, setLoadin] = useState(true);\n  const [currentPage, setCurrentPag] = useState(1);\n  const [movi, setMovie] = useState([]);\n  const [fetchin, setFetchin] = useState(true); // const KP = 'https://api.kinopoisk.cloud/movies/all/page/all/token/fabe3452e26d0b828b9f06da70484a58'\n  // const IMDb = 'https://imdb-api.com/en/API/Top250TVs/k_u9dee0qe'\n  // const TMDb = 'https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${KEY}&total_pages=${itemPerPage}&language=ru'\n  // const [item, setItem] = useState([])\n  // const [loading, setLoading] = useState(false)\n  // const [currentPage, setCurrentPage] = useState(1)\n  // const [itemPerPage] = useState(30)\n\n  const KEY = 'c2918c64f136a280f575ff886f86f99e';\n  useEffect(() => {\n    if (fetchin) {\n      axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${KEY}&page=${currentPage}&language=ru`).then(res => {\n        setLoadin(false);\n        setMovie([...movi, ...res.data.results]);\n        setCurrentPag(prevState => prevState + 1);\n      }).finally(() => setFetchin(false));\n    }\n\n    setItemid(movi);\n  }, [fetchin]);\n\n  const scrollHandler = e => {\n    if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 2000) {\n      setFetchin(true);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('scroll', scrollHandler);\n    return function () {\n      document.removeEventListener('scroll', scrollHandler);\n    };\n  }, []); // useEffect(() => {\n  //     const getItems = async () =>{\n  //         setLoading(true)\n  //         const response = await axios.get(`${IMDb}`)\n  //         console.log(response.data);\n  //         setItem(response.data.items)\n  //         setLoading(false)\n  //     }\n  //     getItems()\n  // },[])\n  // const lastItemIndex = currentPage * itemPerPage\n  // const firstItemIndex = lastItemIndex - itemPerPage\n  // const currentItem = item.slice(firstItemIndex, lastItemIndex )\n  // const paginate = pageNumber => setCurrentPage(pageNumber)\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"films\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"films__inner\",\n      children: loadin === true ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this) : getValue ? getSearch.map((item, id) => /*#__PURE__*/_jsxDEV(FilmsItem, {\n        item: item\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }, this)) : movi.map((item, id) => /*#__PURE__*/_jsxDEV(FilmsItem, {\n        item: item\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Films, \"LYW3h6qnIyXaOscQ7yeHVsc0Gg4=\");\n\n_c = Films;\nexport default Films;\n\nvar _c;\n\n$RefreshReg$(_c, \"Films\");","map":{"version":3,"sources":["D:/search-movies/search-movies/src/Components/Films/Films.jsx"],"names":["React","useState","useEffect","FilmsItem","axios","Films","setItemid","getValue","getSearch","loadin","setLoadin","currentPage","setCurrentPag","movi","setMovie","fetchin","setFetchin","KEY","get","then","res","data","results","prevState","finally","scrollHandler","e","target","documentElement","scrollHeight","scrollTop","window","innerHeight","document","addEventListener","removeEventListener","map","item","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,CAAe;AAACC,EAAAA,SAAD;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAf,EAAiD;AAAA;;AAC7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACU,WAAD,EAAcC,aAAd,IAA+BX,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAM,CAACY,IAAD,EAAOC,QAAP,IAAmBb,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC,CAJ6C,CAM7C;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,QAAMgB,GAAG,GAAG,kCAAZ;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAJ,EAAa;AACXX,MAAAA,KAAK,CACFc,GADH,CAEK,sDAAqDD,GAAI,SAAQN,WAAY,cAFlF,EAIGQ,IAJH,CAISC,GAAD,IAAS;AACbV,QAAAA,SAAS,CAAC,KAAD,CAAT;AACAI,QAAAA,QAAQ,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGO,GAAG,CAACC,IAAJ,CAASC,OAAtB,CAAD,CAAR;AACAV,QAAAA,aAAa,CAAEW,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAb;AACD,OARH,EASGC,OATH,CASW,MAAMR,UAAU,CAAC,KAAD,CAT3B;AAUD;;AACDV,IAAAA,SAAS,CAACO,IAAD,CAAT;AACD,GAdQ,EAcN,CAACE,OAAD,CAdM,CAAT;;AAiBF,QAAMU,aAAa,GAAIC,CAAD,IAAO;AAC3B,QACEA,CAAC,CAACC,MAAF,CAASC,eAAT,CAAyBC,YAAzB,IACGH,CAAC,CAACC,MAAF,CAASC,eAAT,CAAyBE,SAAzB,GAAqCC,MAAM,CAACC,WAD/C,IAEA,IAHF,EAIE;AACAhB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GARD;;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,EAAoCT,aAApC;AACA,WAAO,YAAY;AACjBQ,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,QAA7B,EAAuCV,aAAvC;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT,CA5C+C,CAqD7C;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAEA;;AACA,sBACI;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAEAhB,MAAM,KAAK,IAAX,gBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,GAGAF,QAAQ,GACJC,SAAS,CAAC4B,GAAV,CAAc,CAACC,IAAD,EAAOC,EAAP,kBACZ,QAAC,SAAD;AAAW,QAAA,IAAI,EAAED;AAAjB,SAA4BC,EAA5B;AAAA;AAAA;AAAA;AAAA,cADF,CADI,GAKJzB,IAAI,CAACuB,GAAL,CAAS,CAACC,IAAD,EAAOC,EAAP,kBACP,QAAC,SAAD;AAAW,QAAA,IAAI,EAAED;AAAjB,SAA4BC,EAA5B;AAAA;AAAA;AAAA;AAAA,cADF;AAVJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GAnGQjC,K;;KAAAA,K;AAqGT,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport \"./Films.css\"\r\nimport FilmsItem from './FilmsItem/FilmsItem'\r\nimport axios from 'axios'\r\n\r\nfunction Films({setItemid, getValue, getSearch}) {\r\n    const [loadin, setLoadin] = useState(true);\r\n    const [currentPage, setCurrentPag] = useState(1);\r\n    const [movi, setMovie] = useState([]);\r\n    const [fetchin, setFetchin] = useState(true);\r\n   \r\n    // const KP = 'https://api.kinopoisk.cloud/movies/all/page/all/token/fabe3452e26d0b828b9f06da70484a58'\r\n    // const IMDb = 'https://imdb-api.com/en/API/Top250TVs/k_u9dee0qe'\r\n    // const TMDb = 'https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${KEY}&total_pages=${itemPerPage}&language=ru'\r\n\r\n    // const [item, setItem] = useState([])\r\n    // const [loading, setLoading] = useState(false)\r\n    // const [currentPage, setCurrentPage] = useState(1)\r\n    // const [itemPerPage] = useState(30)\r\n\r\n    const KEY = 'c2918c64f136a280f575ff886f86f99e'\r\n\r\n    useEffect(() => { \r\n      if (fetchin) {\r\n        axios\r\n          .get(\r\n            `https://api.themoviedb.org/3/movie/popular?api_key=${KEY}&page=${currentPage}&language=ru`,\r\n          )\r\n          .then((res) => {\r\n            setLoadin(false);\r\n            setMovie([...movi, ...res.data.results])\r\n            setCurrentPag((prevState) => prevState + 1); \r\n          })\r\n          .finally(() => setFetchin(false));\r\n      }\r\n      setItemid(movi)\r\n    }, [fetchin]);\r\n    \r\n\r\n  const scrollHandler = (e) => {\r\n    if (\r\n      e.target.documentElement.scrollHeight -\r\n        (e.target.documentElement.scrollTop + window.innerHeight) <\r\n      2000\r\n    ) {\r\n      setFetchin(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('scroll', scrollHandler);\r\n    return function () {\r\n      document.removeEventListener('scroll', scrollHandler);\r\n    };\r\n  }, []);\r\n\r\n  \r\n\r\n    // useEffect(() => {\r\n    //     const getItems = async () =>{\r\n    //         setLoading(true)\r\n    //         const response = await axios.get(`${IMDb}`)\r\n    //         console.log(response.data);\r\n    //         setItem(response.data.items)\r\n    //         setLoading(false)\r\n           \r\n    //     }\r\n\r\n    //     getItems()\r\n    // },[])\r\n\r\n    \r\n   \r\n    // const lastItemIndex = currentPage * itemPerPage\r\n    // const firstItemIndex = lastItemIndex - itemPerPage\r\n    // const currentItem = item.slice(firstItemIndex, lastItemIndex )\r\n\r\n    // const paginate = pageNumber => setCurrentPage(pageNumber)\r\n    return (\r\n        <main className=\"films\">\r\n            <div className=\"films__inner\">\r\n            {\r\n            loadin === true ? \r\n                <h1>Загрузка</h1>\r\n               :\r\n            getValue ? \r\n                getSearch.map((item, id) => (\r\n                  <FilmsItem item={item} key={id}/>\r\n                  ))\r\n                :\r\n                movi.map((item, id) => (\r\n                  <FilmsItem item={item} key={id}/>\r\n                  ))\r\n            }\r\n                {/* <Pagination\r\n                 itemPerPage={itemPerPage}\r\n                 totalItems={item.length}\r\n                 paginate={paginate}\r\n                 /> */}\r\n            </div>\r\n        </main>\r\n               \r\n               \r\n    )\r\n}\r\n\r\nexport default Films\r\n"]},"metadata":{},"sourceType":"module"}